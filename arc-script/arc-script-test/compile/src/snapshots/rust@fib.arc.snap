---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/fib.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    pub fn fib(n_0: i32) -> i32 {
        let x_0: i32 = 2i32;
        let x_1: bool = arcorn::val!(n_0) > arcorn::val!(x_0);
        let x_C: i32 = if arcorn::val!(x_1) {
            let x_2: Box<dyn arcorn::ArcornFn(i32) -> i32> =
                Box::new(fib) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
            let x_3: i32 = 1i32;
            let x_4: i32 = arcorn::val!(n_0) - arcorn::val!(x_3);
            let x_5: i32 = arcorn::val!(x_2)(arcorn::val!(x_4));
            let x_6: Box<dyn arcorn::ArcornFn(i32) -> i32> =
                Box::new(fib) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
            let x_7: i32 = 2i32;
            let x_8: i32 = arcorn::val!(n_0) - arcorn::val!(x_7);
            let x_9: i32 = arcorn::val!(x_6)(arcorn::val!(x_8));
            let x_A: i32 = arcorn::val!(x_5) + arcorn::val!(x_9);
            arcorn::val!(x_A)
        } else {
            let x_B: i32 = 0i32;
            arcorn::val!(x_B)
        };
        arcorn::val!(x_C)
    }
    pub fn test() -> i32 {
        let x_D: Box<dyn arcorn::ArcornFn(i32) -> i32> =
            Box::new(fib) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
        let x_E: i32 = 5i32;
        let x_F: i32 = arcorn::val!(x_D)(arcorn::val!(x_E));
        arcorn::val!(x_F)
    }
}
pub use arc_script_output::*;


