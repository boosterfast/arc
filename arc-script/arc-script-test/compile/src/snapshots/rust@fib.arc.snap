---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/fib.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    pub fn fib(n_0: i32) -> i32 {
        let x_0: i32 = 2i32;
        let x_1: bool = (n_0.clone()) > (x_0.clone());
        let x_C: i32 = if (x_1.clone()) {
            let x_2: Box<dyn arcorn::ArcornFn(i32) -> i32> =
                Box::new(fib) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
            let x_3: i32 = 1i32;
            let x_4: i32 = (n_0.clone()) - (x_3.clone());
            let x_5: i32 = (x_2.clone())((x_4.clone()));
            let x_6: Box<dyn arcorn::ArcornFn(i32) -> i32> =
                Box::new(fib) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
            let x_7: i32 = 2i32;
            let x_8: i32 = (n_0.clone()) - (x_7.clone());
            let x_9: i32 = (x_6.clone())((x_8.clone()));
            let x_A: i32 = (x_5.clone()) + (x_9.clone());
            (x_A.clone())
        } else {
            let x_B: i32 = 0i32;
            (x_B.clone())
        };
        (x_C.clone())
    }
    pub fn test() -> i32 {
        let x_D: Box<dyn arcorn::ArcornFn(i32) -> i32> =
            Box::new(fib) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
        let x_E: i32 = 5i32;
        let x_F: i32 = (x_D.clone())((x_E.clone()));
        (x_F.clone())
    }
}
pub use arc_script_output::*;


