---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/extern_state_update.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
pub mod defs {
    use super::*;
    pub use arc_script::arcorn;
    pub use arc_script::arcorn::state::{ArcMapOps, ArcRefOps, ArcSetOps, ArcVecOps};
    pub use arcon::prelude::*;
    pub struct Stateful<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition> {
        pub data: &'i mut StatefulData,
        pub ctx: &'i mut OperatorContext<'source, 'timer, 'channel, StatefulData, B, C>,
        pub timestamp: Option<u64>,
    }
    pub struct StatefulData {
        pub state: StatefulState,
        pub init_0: i32,
    }
    #[derive(ArconState)]
    pub struct StatefulState {
        pub value_0: arc_script::arcorn::state::ArcRef<i32, Sled>,
    }
    impl StateConstructor for StatefulState {
        type BackendType = Sled;
        fn new(backend: Arc<Self::BackendType>) -> Self {
            Self {
                value_0: <arc_script::arcorn::state::ArcRef<i32, Sled>>::arc_ref_default(
                    "value_0",
                    backend.clone(),
                )
                .unwrap(),
            }
        }
    }
    impl StatefulData {
        fn new(init_0: i32) -> OperatorBuilder<StatefulData> {
            OperatorBuilder {
                constructor: Arc::new(move |backend| StatefulData {
                    state: StatefulState {
                        value_0: <arc_script::arcorn::state::ArcRef<i32, Sled>>::arc_ref_new(
                            "value_0",
                            backend.clone(),
                            {
                                let y_1_0 = self.data.init_0;
                                y_1_0
                            },
                        )
                        .unwrap(),
                    },
                    init_0,
                }),
                conf: Default::default(),
            }
        }
    }
    impl Operator for StatefulData {
        type IN = Struct5valuei32End;
        type OUT = Struct5valuei32End;
        type TimerState = ArconNever;
        type OperatorState = StatefulState;
        fn handle_element(
            &mut self,
            elem: ArconElement<Self::IN>,
            ref mut ctx: OperatorContext<Self, impl Backend, impl ComponentDefinition>,
        ) -> OperatorResult<()> {
            let ArconElement { timestamp, data } = elem;
            let event = data.value;
            let mut task = Stateful {
                data: self,
                ctx,
                timestamp,
            };
            task.handle(event);
            Ok(())
        }
        fn state(&mut self) -> &mut Self::OperatorState {
            &mut self.state
        }
        arcon::ignore_timeout!();
        arcon::ignore_persist!();
    }
    impl<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition>
        Stateful<'i, 'source, 'timer, 'channel, B, C>
    {
        fn handle(&mut self, event_0: i32) -> OperatorResult<()> {
            {
                let y_1_0 = self.update(event_0);
                self.emit(y_1_0)
            };
            Ok(())
        }
        fn emit(&mut self, event_0: i32) {
            let data = Struct5valuei32End { value: event_0 };
            let elem = ArconElement {
                data,
                timestamp: self.timestamp,
            };
            self.ctx.output(elem);
        }
    }
    #[arcorn::rewrite]
    #[derive(Copy)]
    pub struct Struct5valuei32End {
        value: i32,
    }
}
pub use defs::*;


