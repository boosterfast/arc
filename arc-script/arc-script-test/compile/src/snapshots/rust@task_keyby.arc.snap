---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_keyby.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(on_event = "KeyBy_on_event", on_start = "KeyBy_on_start")]
    mod KeyBy_mod {
        struct KeyBy {
            keyfun_0: Box<dyn arcorn::ArcornFn(i32) -> i32>,
        }
        #[arcorn::rewrite]
        pub enum KeyBy_IInterface {
            KeyBy_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum KeyBy_OInterface {
            KeyBy_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl KeyBy_mod::KeyBy {
        pub fn KeyBy_on_event(&mut self, x_3: KeyBy_IInterface) -> () {
            let x_0: Struct3keyi325valuei32End =
                arcorn::unwrap!(KeyBy_IInterface___, (x_3.clone()));
            let x_1: i32 = (x_0.clone()).value;
            let x_2: i32 = (x_0.clone()).key;
            let x_4: i32 = ((self.keyfun_0).clone())((x_1.clone()));
            let x_5: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                value: (x_1.clone()),
                key: (x_4.clone()),
            };
            let x_6: KeyBy_OInterface = arcorn::enwrap!(KeyBy_OInterface___, (x_5.clone()));
            let x_7: () = self.emit((x_6.clone()));
            (x_7.clone())
        }
        pub fn KeyBy_on_start(&mut self, keyfun_0: Box<dyn arcorn::ArcornFn(i32) -> i32>) -> () {
            let x_9: () = ();
            (x_9.clone())
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


