---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_keyby.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    #[arcorn::rewrite(on_event = "KeyBy_on_event", on_start = "KeyBy_on_start")]
    mod KeyBy_mod {
        struct KeyBy {
            keyfun_0: Box<dyn arcorn::ArcornFn(i32) -> i32>,
        }
        #[arcorn::rewrite]
        pub enum KeyBy_IInterface {
            KeyBy_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum KeyBy_OInterface {
            KeyBy_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl KeyBy_mod::KeyBy {
        pub fn KeyBy_on_event(&mut self, x_3: KeyBy_IInterface) -> Unit {
            let x_0: Struct3keyi325valuei32End =
                arcorn::unwrap!(KeyBy_IInterface___, arcorn::val!(x_3));
            let x_1: i32 = arcorn::access!(arcorn::val!(x_0), value);
            let x_2: i32 = arcorn::access!(arcorn::val!(x_0), key);
            let x_4: i32 = ((self.keyfun_0).clone())(arcorn::val!(x_1));
            let x_5: Struct3keyi325valuei32End =
                arc_script::arcorn::new!(Struct3keyi325valuei32End {
                    value: arcorn::val!(x_1),
                    key: arcorn::val!(x_4)
                });
            let x_6: KeyBy_OInterface = arcorn::enwrap!(KeyBy_OInterface___, arcorn::val!(x_5));
            let x_7: Unit = self.emit(arcorn::val!(x_6));
            arcorn::val!(x_7)
        }
        pub fn KeyBy_on_start(&mut self) -> Unit {
            let x_9: Unit = ();
            arcorn::val!(x_9)
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


