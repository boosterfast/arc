---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_keyby.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
pub mod defs {
    use super::*;
    pub use arc_script::arcorn;
    pub use arc_script::arcorn::state::{ArcMapOps, ArcRefOps, ArcSetOps, ArcVecOps};
    pub use arcon::prelude::*;
    pub struct KeyBy<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition> {
        pub data: &'i mut KeyByData,
        pub ctx: &'i mut OperatorContext<'source, 'timer, 'channel, KeyByData, B, C>,
        pub timestamp: Option<u64>,
        pub key: u64,
    }
    pub struct KeyByData {
        pub state: KeyByState,
        pub keyfun_0: fn(i32) -> i32,
    }
    #[derive(ArconState)]
    pub struct KeyByState {}
    impl StateConstructor for KeyByState {
        type BackendType = Sled;
        fn new(backend: Arc<Self::BackendType>) -> Self {
            Self {}
        }
    }
    impl KeyByData {
        fn new(keyfun_0: fn(i32) -> i32) -> OperatorBuilder<KeyByData> {
            OperatorBuilder {
                constructor: Arc::new(move |backend| KeyByData {
                    state: KeyByState {},
                    keyfun_0,
                }),
                conf: Default::default(),
            }
        }
    }
    impl Operator for KeyByData {
        type IN = Struct3vali323keyi32End;
        type OUT = Struct3vali323keyi32End;
        type TimerState = ArconNever;
        type OperatorState = KeyByState;
        fn handle_element(
            &mut self,
            element: ArconElement<Self::IN>,
            ref mut ctx: OperatorContext<Self, impl Backend, impl ComponentDefinition>,
        ) -> OperatorResult<()> {
            let ArconElement { timestamp, data } = element;
            let mut task = KeyBy {
                data: self,
                ctx,
                timestamp,
                key: data.get_key(),
            };
            task.handle_element(data);
            Ok(())
        }
        fn state(&mut self) -> &mut Self::OperatorState {
            &mut self.state
        }
        fn handle_timeout(
            &mut self,
            timeout: Self::TimerState,
            ref mut ctx: OperatorContext<Self, impl Backend, impl ComponentDefinition>,
        ) -> OperatorResult<()> {
            Ok(())
        }
        fn persist(&mut self) -> OperatorResult<()> {
            self.state.persist();
            Ok(())
        }
    }
    impl<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition>
        KeyBy<'i, 'source, 'timer, 'channel, B, C>
    {
        fn handle_element(&mut self, x_0: Struct3vali323keyi32End) -> OperatorResult<()> {
            {
                let y_1_0 = x_0.val;
                let y_1_1 = x_0.key;
                let y_1_2 = self.data.keyfun_0;
                let y_1_3 = y_1_2(y_1_0);
                let y_1_4 = Struct3vali323keyi32End {
                    val: y_1_0,
                    key: y_1_3,
                };
                self.emit(y_1_4)
            };
            Ok(())
        }
        fn emit(&mut self, data: Struct3vali323keyi32End) {
            let element = ArconElement {
                data,
                timestamp: self.timestamp,
            };
            self.ctx.output(element);
        }
    }
    #[arcorn::rewrite]
    #[derive(Copy)]
    pub struct Struct3vali323keyi32End {
        val: i32,
        key: i32,
    }
}
pub use defs::*;


