---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_with_funs.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    #[arcorn::rewrite(on_event = "Test_on_event", on_start = "Test_on_start")]
    mod Test_mod {
        struct Test {
            x_0: i32,
        }
        #[arcorn::rewrite]
        pub enum Test_IInterface {
            Test_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Test_OInterface {
            Test_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Test_mod::Test {
        pub fn Test_on_event(&mut self, x_5: Test_IInterface) -> Unit {
            let x_2: Struct3keyi325valuei32End =
                arcorn::unwrap!(Test_IInterface___, arcorn::val!(x_5));
            let x_3: i32 = arcorn::access!(arcorn::val!(x_2), value);
            let x_4: i32 = arcorn::access!(arcorn::val!(x_2), key);
            let x_6: i32 = self.Test_addx(arcorn::val!(x_3));
            let x_7: Struct3keyi325valuei32End =
                arc_script::arcorn::new!(Struct3keyi325valuei32End {
                    value: arcorn::val!(x_6),
                    key: arcorn::val!(x_4)
                });
            let x_8: Test_OInterface = arcorn::enwrap!(Test_OInterface___, arcorn::val!(x_7));
            let x_9: Unit = self.emit(arcorn::val!(x_8));
            arcorn::val!(x_9)
        }
        pub fn Test_on_start(&mut self) -> Unit {
            let x_B: Unit = ();
            arcorn::val!(x_B)
        }
        pub fn Test_addx(&mut self, y_0: i32) -> i32 {
            let x_1: i32 = ((self.x_0).clone()) + arcorn::val!(y_0);
            arcorn::val!(x_1)
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


