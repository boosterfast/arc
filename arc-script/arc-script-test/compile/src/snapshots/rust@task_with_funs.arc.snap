---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_with_funs.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(on_event = "Test_on_event", on_start = "Test_on_start")]
    mod Test_mod {
        struct Test {
            x_0: i32,
        }
        #[arcorn::rewrite]
        pub enum Test_IInterface {
            Test_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Test_OInterface {
            Test_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Test_mod::Test {
        pub fn Test_on_event(&mut self, x_5: Test_IInterface) -> () {
            let x_2: Struct3keyi325valuei32End = arcorn::unwrap!(Test_IInterface___, (x_5.clone()));
            let x_3: i32 = (x_2.clone()).value;
            let x_4: i32 = (x_2.clone()).key;
            let x_6: i32 = self.Test_addx((x_3.clone()));
            let x_7: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                value: (x_6.clone()),
                key: (x_4.clone()),
            };
            let x_8: Test_OInterface = arcorn::enwrap!(Test_OInterface___, (x_7.clone()));
            let x_9: () = self.emit((x_8.clone()));
            (x_9.clone())
        }
        pub fn Test_on_start(&mut self) -> () {
            let x_B: () = ();
            (x_B.clone())
        }
        pub fn Test_addx(&mut self, y_0: i32) -> i32 {
            let x_1: i32 = ((self.x_0).clone()) + (y_0.clone());
            (x_1.clone())
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


