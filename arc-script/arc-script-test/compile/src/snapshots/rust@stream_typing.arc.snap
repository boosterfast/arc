---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/stream_typing.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    pub fn test0(
        x_0: arcorn::Stream<Struct3keyi325valuei32End>,
    ) -> arcorn::Stream<Struct3keyi325valuei32End> {
        let x_1: Box<
            dyn arcorn::ArcornFn(
                arcorn::Stream<Struct3keyi325valuei32End>,
            ) -> arcorn::Stream<Struct3keyi325valuei32End>,
        > = Box::new(test1)
            as Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<Struct3keyi325valuei32End>,
                ) -> arcorn::Stream<Struct3keyi325valuei32End>,
            >;
        let x_2: arcorn::Stream<Struct3keyi325valuei32End> = (x_1.clone())((x_0.clone()));
        (x_2.clone())
    }
    pub fn test1(
        x_3: arcorn::Stream<Struct3keyi325valuei32End>,
    ) -> arcorn::Stream<Struct3keyi325valuei32End> {
        (x_3.clone())
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


