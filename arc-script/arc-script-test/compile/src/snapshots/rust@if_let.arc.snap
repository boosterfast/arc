---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/if_let.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    pub fn x_H(x_1: i32) -> i32 {
        let x_F: i32 = 2i32;
        let x_G: i32 = (x_1.clone()) + (x_F.clone());
        (x_G.clone())
    }
    pub fn test() -> i32 {
        let x_0: i32 = 3i32;
        let x_1: i32 = 5i32;
        let x_2: i32 = 3i32;
        let x_3: (i32, i32) = ((x_2.clone()), (x_0.clone()));
        let x_4: i32 = 1i32;
        let x_5: ((i32, i32), i32) = ((x_3.clone()), (x_4.clone()));
        let x_6: (i32, i32) = (x_5.clone()).0;
        let x_7: i32 = (x_6.clone()).0;
        let x_8: i32 = 1i32;
        let x_9: bool = (x_7.clone()) == (x_8.clone());
        let x_L: i32 = if (x_9.clone()) {
            let x_A: i32 = (x_6.clone()).1;
            let x_B: i32 = (x_5.clone()).1;
            let x_C: i32 = 1i32;
            let x_D: bool = (x_B.clone()) == (x_C.clone());
            let x_K: i32 = if (x_D.clone()) {
                let x_E: i32 = (x_A.clone()) + (x_1.clone());
                (x_E.clone())
            } else {
                let x_I: Box<dyn arcorn::ArcornFn(i32) -> i32> =
                    Box::new(x_H) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
                let x_J: i32 = (x_I.clone())((x_1.clone()));
                (x_J.clone())
            };
            (x_K.clone())
        } else {
            let x_I: Box<dyn arcorn::ArcornFn(i32) -> i32> =
                Box::new(x_H) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
            let x_J: i32 = (x_I.clone())((x_1.clone()));
            (x_J.clone())
        };
        (x_L.clone())
    }
}
pub use arc_script_output::*;


