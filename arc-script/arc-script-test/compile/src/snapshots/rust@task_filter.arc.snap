---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_filter.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    #[arcorn::rewrite(on_event = "Filter_on_event", on_start = "Filter_on_start")]
    mod Filter_mod {
        struct Filter {
            p_0: Box<dyn arcorn::ArcornFn(i32) -> bool>,
        }
        #[arcorn::rewrite]
        pub enum Filter_IInterface {
            Filter_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Filter_OInterface {
            Filter_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Filter_mod::Filter {
        pub fn Filter_on_event(&mut self, x_3: Filter_IInterface) -> Unit {
            let x_0: Struct3keyi325valuei32End =
                arcorn::unwrap!(Filter_IInterface___, arcorn::val!(x_3));
            let x_1: i32 = arcorn::access!(arcorn::val!(x_0), value);
            let x_2: i32 = arcorn::access!(arcorn::val!(x_0), key);
            let x_4: bool = ((self.p_0).clone())(arcorn::val!(x_1));
            let x_9: Unit = if arcorn::val!(x_4) {
                let x_5: Struct3keyi325valuei32End =
                    arc_script::arcorn::new!(Struct3keyi325valuei32End {
                        value: arcorn::val!(x_1),
                        key: arcorn::val!(x_2)
                    });
                let x_6: Filter_OInterface =
                    arcorn::enwrap!(Filter_OInterface___, arcorn::val!(x_5));
                let x_7: Unit = self.emit(arcorn::val!(x_6));
                arcorn::val!(x_7)
            } else {
                let x_8: Unit = ();
                arcorn::val!(x_8)
            };
            arcorn::val!(x_9)
        }
        pub fn Filter_on_start(&mut self) -> Unit {
            let x_B: Unit = ();
            arcorn::val!(x_B)
        }
    }
    pub fn x_D(x_E: i32) -> bool {
        let x_F: i32 = 2i32;
        let x_G: i32 = arcorn::val!(x_E) % arcorn::val!(x_F);
        let x_H: i32 = 0i32;
        let x_I: bool = arcorn::val!(x_G) == arcorn::val!(x_H);
        arcorn::val!(x_I)
    }
    pub fn main(
        stream0_0: arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T>,
    ) -> arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T> {
        let x_C: Box<
            dyn arcorn::ArcornFn(
                Box<dyn arcorn::ArcornFn(i32) -> bool>,
            ) -> Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T>,
                ) -> arcorn::Stream<
                    <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
                >,
            >,
        > = Box::new(Filter)
            as Box<
                dyn arcorn::ArcornFn(
                    Box<dyn arcorn::ArcornFn(i32) -> bool>,
                ) -> Box<
                    dyn arcorn::ArcornFn(
                        arcorn::Stream<
                            <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
                        >,
                    ) -> arcorn::Stream<
                        <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
                    >,
                >,
            >;
        let x_J: Box<dyn arcorn::ArcornFn(i32) -> bool> =
            Box::new(x_D) as Box<dyn arcorn::ArcornFn(i32) -> bool>;
        let x_K: Box<
            dyn arcorn::ArcornFn(
                arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T>,
            ) -> arcorn::Stream<
                <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
            >,
        > = arcorn::val!(x_C)(arcorn::val!(x_J));
        let x_L: arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T> =
            arcorn::val!(x_K)(arcorn::val!(stream0_0));
        arcorn::val!(x_L)
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


