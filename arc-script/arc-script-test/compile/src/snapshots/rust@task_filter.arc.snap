---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_filter.arc

---
use arc_script::arcorn;
use arc_script::arcorn::state::{ArcMapOps, ArcRefOps, ArcSetOps, ArcVecOps};
use arcon::prelude::*;
pub struct Filter<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition> {
    pub data: &'i mut FilterData,
    pub ctx: &'i mut OperatorContext<'source, 'timer, 'channel, FilterData, B, C>,
    pub timestamp: Option<u64>,
}
pub struct FilterData {
    pub state: FilterState,
    pub p_0: fn(i32) -> bool,
}
#[derive(ArconState)]
pub struct FilterState {}
impl StateConstructor for FilterState {
    type BackendType = arcon::prelude::Sled;
    fn new(backend: Arc<Self::BackendType>) -> Self {
        Self {}
    }
}
impl FilterData {
    fn new(p_0: fn(i32) -> bool) -> OperatorBuilder<FilterData> {
        OperatorBuilder {
            constructor: Arc::new(move |backend| FilterData {
                state: FilterState {},
                p_0,
            }),
            conf: Default::default(),
        }
    }
}
impl Operator for FilterData {
    type IN = Struct5valuei32End;
    type OUT = Struct5valuei32End;
    type TimerState = ArconNever;
    type OperatorState = FilterState;
    fn handle_element(
        &mut self,
        elem: ArconElement<Self::IN>,
        ref mut ctx: OperatorContext<Self, impl Backend, impl ComponentDefinition>,
    ) -> OperatorResult<()> {
        let ArconElement { timestamp, data } = elem;
        let event = data.value;
        let mut task = Filter {
            data: self,
            ctx,
            timestamp,
        };
        task.handle(event);
        Ok(())
    }
    fn state(&mut self) -> &mut Self::OperatorState {
        &mut self.state
    }
    arcon::ignore_timeout!();
    arcon::ignore_persist!();
}
impl<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition>
    Filter<'i, 'source, 'timer, 'channel, B, C>
{
    fn handle(&mut self, event_0: i32) -> OperatorResult<()> {
        {
            let y_1_0 = self.data.p_0;
            let y_1_1 = y_1_0(event_0);
            let y_1_2 = if y_1_1 {
                self.emit(event_0)
            } else {
                let y_2_0 = ();
                y_2_0
            };
            y_1_2
        };
        Ok(())
    }
    fn emit(&mut self, event_0: i32) {
        let data = Struct5valuei32End { value: event_0 };
        let elem = ArconElement {
            data,
            timestamp: self.timestamp,
        };
        self.ctx.output(elem);
    }
}
pub fn x_0(x_1: i32) -> bool {
    let y_1_0 = 2i32;
    let y_1_1 = x_1 % y_1_0;
    let y_1_2 = 0i32;
    let y_1_3 = y_1_1 == y_1_2;
    y_1_3
}
pub fn main(stream0_0: Stream<Struct5valuei32End>) -> Stream<Struct5valuei32End> {
    let y_1_0 = FilterData::new(x_0);
    let y_1_1 = Stream::operator(stream0_0, y_1_0);
    y_1_1
}
#[arcorn::rewrite]
#[derive(Copy)]
pub struct Struct5valuei32End {
    value: i32,
}


