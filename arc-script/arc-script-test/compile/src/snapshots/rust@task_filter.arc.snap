---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_filter.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(on_event = "Filter_on_event", on_start = "Filter_on_start")]
    mod Filter_mod {
        struct Filter {
            p_0: Box<dyn arcorn::ArcornFn(i32) -> bool>,
        }
        #[arcorn::rewrite]
        pub enum Filter_IInterface {
            Filter_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Filter_OInterface {
            Filter_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Filter_mod::Filter {
        pub fn Filter_on_event(&mut self, x_3: Filter_IInterface) -> () {
            let x_0: Struct3keyi325valuei32End =
                arcorn::unwrap!(Filter_IInterface___, (x_3.clone()));
            let x_1: i32 = (x_0.clone()).value;
            let x_2: i32 = (x_0.clone()).key;
            let x_4: bool = ((self.p_0).clone())((x_1.clone()));
            let x_9: () = if (x_4.clone()) {
                let x_5: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                    value: (x_1.clone()),
                    key: (x_2.clone()),
                };
                let x_6: Filter_OInterface = arcorn::enwrap!(Filter_OInterface___, (x_5.clone()));
                let x_7: () = self.emit((x_6.clone()));
                (x_7.clone())
            } else {
                let x_8: () = ();
                (x_8.clone())
            };
            (x_9.clone())
        }
        pub fn Filter_on_start(&mut self, p_0: Box<dyn arcorn::ArcornFn(i32) -> bool>) -> () {
            let x_B: () = ();
            (x_B.clone())
        }
    }
    pub fn x_D(x_E: i32) -> bool {
        let x_F: i32 = 2i32;
        let x_G: i32 = (x_E.clone()) % (x_F.clone());
        let x_H: i32 = 0i32;
        let x_I: bool = (x_G.clone()) == (x_H.clone());
        (x_I.clone())
    }
    pub fn main(
        stream0_0: arcorn::Stream<Struct3keyi325valuei32End>,
    ) -> arcorn::Stream<Struct3keyi325valuei32End> {
        let x_C: Box<
            dyn arcorn::ArcornFn(
                Box<dyn arcorn::ArcornFn(i32) -> bool>,
            ) -> Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<Struct3keyi325valuei32End>,
                ) -> arcorn::Stream<Struct3keyi325valuei32End>,
            >,
        > = Box::new(Filter)
            as Box<
                dyn arcorn::ArcornFn(
                    Box<dyn arcorn::ArcornFn(i32) -> bool>,
                ) -> Box<
                    dyn arcorn::ArcornFn(
                        arcorn::Stream<Struct3keyi325valuei32End>,
                    )
                        -> arcorn::Stream<Struct3keyi325valuei32End>,
                >,
            >;
        let x_J: Box<dyn arcorn::ArcornFn(i32) -> bool> =
            Box::new(x_D) as Box<dyn arcorn::ArcornFn(i32) -> bool>;
        let x_K: Box<
            dyn arcorn::ArcornFn(
                arcorn::Stream<Struct3keyi325valuei32End>,
            ) -> arcorn::Stream<Struct3keyi325valuei32End>,
        > = (x_C.clone())((x_J.clone()));
        let x_L: arcorn::Stream<Struct3keyi325valuei32End> = (x_K.clone())((stream0_0.clone()));
        (x_L.clone())
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


