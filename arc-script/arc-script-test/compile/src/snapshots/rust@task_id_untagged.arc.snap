---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/task_id_untagged.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    #[arcorn::rewrite(on_event = "Identity_on_event", on_start = "Identity_on_start")]
    mod Identity_mod {
        struct Identity {}
        #[arcorn::rewrite]
        pub enum Identity_IInterface {
            Identity_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Identity_OInterface {
            Identity_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Identity_mod::Identity {
        pub fn Identity_on_event(&mut self, x_0: Identity_IInterface) -> () {
            let event_0: Struct3keyi325valuei32End =
                arcorn::unwrap!(Identity_IInterface___, (x_0.clone()));
            let x_1: Identity_OInterface =
                arcorn::enwrap!(Identity_OInterface___, (event_0.clone()));
            let x_2: () = self.emit((x_1.clone()));
            (x_2.clone())
        }
        pub fn Identity_on_start(&mut self) -> () {
            let x_4: () = ();
            (x_4.clone())
        }
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


