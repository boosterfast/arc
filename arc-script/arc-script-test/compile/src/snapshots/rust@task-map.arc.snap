---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/expect-mlir-fail-todo/task-map.arc
---
use arc_script::arcorn;
use arcon::prelude::*;
#[derive(ArconState)]
pub struct TaskMap {
    #[ephemeral]
    timestamp: Option<u64>,
    #[ephemeral]
    pub f_0: fn(i32) -> i32,
}
impl Operator for TaskMap {
    type IN = Struct5valuei32End;
    type OUT = Struct5valuei32End;
    type TimerState = ArconNever;
    type OperatorState = Self;
    fn handle_element(
        &mut self,
        elem: ArconElement<Self::IN>,
        mut ctx: OperatorContext<Self, impl Backend, impl ComponentDefinition>,
    ) -> OperatorResult<()> {
        self.timestamp = elem.timestamp;
        let event_0 = elem.data.value;
        ctx.output(ArconElement {
            data: Self::OUT {
                value: (self.f_0)(event_0),
            },
            timestamp: self.timestamp,
        });
        Ok(())
    }
    arcon::ignore_timeout!();
    arcon::ignore_persist!();
}
fn Map(f_0: fn(i32) -> i32) -> OperatorBuilder<TaskMap> {
    OperatorBuilder {
        constructor: Arc::new(move |b| TaskMap {
            timestamp: None,
            f_0,
        }),
        conf: Default::default(),
    }
}
impl TaskMap {}
pub fn x_0(x_1: i32) -> i32 {
    x_1 + 1i32
}
pub fn main(input_0: Stream<Struct5valuei32End>) -> Stream<Struct5valuei32End> {
    let output_0: Stream<Struct5valuei32End> = Stream::operator(input_0, Map(x_0));
    output_0
}
#[arcorn::rewrite]
#[derive(Copy)]
pub struct Struct5valuei32End {
    value: i32,
}


