---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/expect-pass/binops.arc
---
fun main() -> unit {
    let c_bool_0: bool = true in
    let c_i8_0: i8 = 127i8 in
    let c_i16_0: i16 = 32767i16 in
    let c_i32_0: i32 = 2147483647 in
    let c_i64_0: i64 = 9223372036854775807i64 in
    let c_u8_0: u8 = 255u8 in
    let c_u16_0: u16 = 65535u16 in
    let c_u32_0: u32 = 4294967295u32 in
    let c_u64_0: u64 = 18446744073709551615u64 in
    let c_f32_0: f32 = 3.4028235e38f32 in
    let c_f64_0: f64 = 1.7976931348623157e308 in
    let c1_i8_0: i8 = 126i8 in
    let c1_i16_0: i16 = 32766i16 in
    let c1_i32_0: i32 = 2147483646 in
    let c1_i64_0: i64 = 9223372036854775806i64 in
    let c1_u8_0: u8 = 254u8 in
    let c1_u16_0: u16 = 65534u16 in
    let c1_u32_0: u32 = 4294967294u32 in
    let c1_u64_0: u64 = 18446744073709551614u64 in
    let c1_f32_0: f32 = 3.4028235e37f32 in
    let c1_f64_0: f64 = 1.7976931348623155e308 in
    let sum_i8_0: i8 = c_i8_0 + c_i8_0 in
    let sum_i16_0: i16 = c_i16_0 + c_i16_0 in
    let sum_i32_0: i32 = c_i32_0 + c_i32_0 in
    let sum_i64_0: i64 = c_i64_0 + c_i64_0 in
    let sum_u8_0: u8 = c_u8_0 + c_u8_0 in
    let sum_u16_0: u16 = c_u16_0 + c_u16_0 in
    let sum_u32_0: u32 = c_u32_0 + c_u32_0 in
    let sum_u64_0: u64 = c_u64_0 + c_u64_0 in
    let sum_f32_0: f32 = c_f32_0 + c_f32_0 in
    let sum_f64_0: f64 = c_f64_0 + c_f64_0 in
    let difference_i8_0: i8 = c_i8_0 - c_i8_0 in
    let difference_i16_0: i16 = c_i16_0 - c_i16_0 in
    let difference_i32_0: i32 = c_i32_0 - c_i32_0 in
    let difference_i64_0: i64 = c_i64_0 - c_i64_0 in
    let difference_u8_0: u8 = c_u8_0 - c_u8_0 in
    let difference_u16_0: u16 = c_u16_0 - c_u16_0 in
    let difference_u32_0: u32 = c_u32_0 - c_u32_0 in
    let difference_u64_0: u64 = c_u64_0 - c_u64_0 in
    let difference_f32_0: f32 = c_f32_0 - c_f32_0 in
    let difference_f64_0: f64 = c_f64_0 - c_f64_0 in
    let product_i8_0: i8 = c_i8_0 * c_i8_0 in
    let product_i16_0: i16 = c_i16_0 * c_i16_0 in
    let product_i32_0: i32 = c_i32_0 * c_i32_0 in
    let product_i64_0: i64 = c_i64_0 * c_i64_0 in
    let product_u8_0: u8 = c_u8_0 * c_u8_0 in
    let product_u16_0: u16 = c_u16_0 * c_u16_0 in
    let product_u32_0: u32 = c_u32_0 * c_u32_0 in
    let product_u64_0: u64 = c_u64_0 * c_u64_0 in
    let product_f32_0: f32 = c_f32_0 * c_f32_0 in
    let product_f64_0: f64 = c_f64_0 * c_f64_0 in
    let quotient_i8_0: i8 = c_i8_0 / c_i8_0 in
    let quotient_i16_0: i16 = c_i16_0 / c_i16_0 in
    let quotient_i32_0: i32 = c_i32_0 / c_i32_0 in
    let quotient_i64_0: i64 = c_i64_0 / c_i64_0 in
    let quotient_u8_0: u8 = c_u8_0 / c_u8_0 in
    let quotient_u16_0: u16 = c_u16_0 / c_u16_0 in
    let quotient_u32_0: u32 = c_u32_0 / c_u32_0 in
    let quotient_u64_0: u64 = c_u64_0 / c_u64_0 in
    let quotient_f32_0: f32 = c_f32_0 / c_f32_0 in
    let quotient_f64_0: f64 = c_f64_0 / c_f64_0 in
    let remainder_i8_0: i8 = c_i8_0 % c_i8_0 in
    let remainder_i16_0: i16 = c_i16_0 % c_i16_0 in
    let remainder_i32_0: i32 = c_i32_0 % c_i32_0 in
    let remainder_i64_0: i64 = c_i64_0 % c_i64_0 in
    let remainder_u8_0: u8 = c_u8_0 % c_u8_0 in
    let remainder_u16_0: u16 = c_u16_0 % c_u16_0 in
    let remainder_u32_0: u32 = c_u32_0 % c_u32_0 in
    let remainder_u64_0: u64 = c_u64_0 % c_u64_0 in
    let remainder_f32_0: f32 = c_f32_0 % c_f32_0 in
    let remainder_f64_0: f64 = c_f64_0 % c_f64_0 in
    let lt_i8_0: bool = c_i8_0 < c_i8_0 in
    let lt_i16_0: bool = c_i16_0 < c_i16_0 in
    let lt_i32_0: bool = c_i32_0 < c_i32_0 in
    let lt_i64_0: bool = c_i64_0 < c_i64_0 in
    let lt_u8_0: bool = c_u8_0 < c_u8_0 in
    let lt_u16_0: bool = c_u16_0 < c_u16_0 in
    let lt_u32_0: bool = c_u32_0 < c_u32_0 in
    let lt_u64_0: bool = c_u64_0 < c_u64_0 in
    let lt_f32_0: bool = c_f32_0 < c_f32_0 in
    let lt_f64_0: bool = c_f64_0 < c_f64_0 in
    let le_i8_0: bool = c_i8_0 <= c_i8_0 in
    let le_i16_0: bool = c_i16_0 <= c_i16_0 in
    let le_i32_0: bool = c_i32_0 <= c_i32_0 in
    let le_i64_0: bool = c_i64_0 <= c_i64_0 in
    let le_u8_0: bool = c_u8_0 <= c_u8_0 in
    let le_u16_0: bool = c_u16_0 <= c_u16_0 in
    let le_u32_0: bool = c_u32_0 <= c_u32_0 in
    let le_u64_0: bool = c_u64_0 <= c_u64_0 in
    let le_f32_0: bool = c_f32_0 <= c_f32_0 in
    let le_f64_0: bool = c_f64_0 <= c_f64_0 in
    let gt_i8_0: bool = c_i8_0 > c_i8_0 in
    let gt_i16_0: bool = c_i16_0 > c_i16_0 in
    let gt_i32_0: bool = c_i32_0 > c_i32_0 in
    let gt_i64_0: bool = c_i64_0 > c_i64_0 in
    let gt_u8_0: bool = c_u8_0 > c_u8_0 in
    let gt_u16_0: bool = c_u16_0 > c_u16_0 in
    let gt_u32_0: bool = c_u32_0 > c_u32_0 in
    let gt_u64_0: bool = c_u64_0 > c_u64_0 in
    let gt_f32_0: bool = c_f32_0 > c_f32_0 in
    let gt_f64_0: bool = c_f64_0 > c_f64_0 in
    let ge_i8_0: bool = c_i8_0 >= c_i8_0 in
    let ge_i16_0: bool = c_i16_0 >= c_i16_0 in
    let ge_i32_0: bool = c_i32_0 >= c_i32_0 in
    let ge_i64_0: bool = c_i64_0 >= c_i64_0 in
    let ge_u8_0: bool = c_u8_0 >= c_u8_0 in
    let ge_u16_0: bool = c_u16_0 >= c_u16_0 in
    let ge_u32_0: bool = c_u32_0 >= c_u32_0 in
    let ge_u64_0: bool = c_u64_0 >= c_u64_0 in
    let ge_f32_0: bool = c_f32_0 >= c_f32_0 in
    let ge_f64_0: bool = c_f64_0 >= c_f64_0 in
    let eq_bool_0: bool = c_bool_0 == c_bool_0 in
    let eq_i8_0: bool = c_i8_0 == c_i8_0 in
    let eq_i16_0: bool = c_i16_0 == c_i16_0 in
    let eq_i32_0: bool = c_i32_0 == c_i32_0 in
    let eq_i64_0: bool = c_i64_0 == c_i64_0 in
    let eq_u8_0: bool = c_u8_0 == c_u8_0 in
    let eq_u16_0: bool = c_u16_0 == c_u16_0 in
    let eq_u32_0: bool = c_u32_0 == c_u32_0 in
    let eq_u64_0: bool = c_u64_0 == c_u64_0 in
    let eq_f32_0: bool = c_f32_0 == c_f32_0 in
    let eq_f64_0: bool = c_f64_0 == c_f64_0 in
    let ne_bool_0: bool = c_bool_0 != c_bool_0 in
    let ne_i8_0: bool = c_i8_0 != c_i8_0 in
    let ne_i16_0: bool = c_i16_0 != c_i16_0 in
    let ne_i32_0: bool = c_i32_0 != c_i32_0 in
    let ne_i64_0: bool = c_i64_0 != c_i64_0 in
    let ne_u8_0: bool = c_u8_0 != c_u8_0 in
    let ne_u16_0: bool = c_u16_0 != c_u16_0 in
    let ne_u32_0: bool = c_u32_0 != c_u32_0 in
    let ne_u64_0: bool = c_u64_0 != c_u64_0 in
    let ne_f32_0: bool = c_f32_0 != c_f32_0 in
    let ne_f64_0: bool = c_f64_0 != c_f64_0 in
    let land_0: bool = c_bool_0 and c_bool_0 in
    let lor_0: bool = c_bool_0 or c_bool_0 in
    let lxor_0: bool = c_bool_0 xor c_bool_0 in
    let band_i8_0: i8 = c_i8_0 band c_i8_0 in
    let band_i16_0: i16 = c_i16_0 band c_i16_0 in
    let band_i32_0: i32 = c_i32_0 band c_i32_0 in
    let band_i64_0: i64 = c_i64_0 band c_i64_0 in
    let band_u8_0: u8 = c_u8_0 band c_u8_0 in
    let band_u16_0: u16 = c_u16_0 band c_u16_0 in
    let band_u32_0: u32 = c_u32_0 band c_u32_0 in
    let band_u64_0: u64 = c_u64_0 band c_u64_0 in
    let bor_i8_0: i8 = c_i8_0 bor c_i8_0 in
    let bor_i16_0: i16 = c_i16_0 bor c_i16_0 in
    let bor_i32_0: i32 = c_i32_0 bor c_i32_0 in
    let bor_i64_0: i64 = c_i64_0 bor c_i64_0 in
    let bor_u8_0: u8 = c_u8_0 bor c_u8_0 in
    let bor_u16_0: u16 = c_u16_0 bor c_u16_0 in
    let bor_u32_0: u32 = c_u32_0 bor c_u32_0 in
    let bor_u64_0: u64 = c_u64_0 bor c_u64_0 in
    let bxor_i8_0: i8 = c_i8_0 bxor c_i8_0 in
    let bxor_i16_0: i16 = c_i16_0 bxor c_i16_0 in
    let bxor_i32_0: i32 = c_i32_0 bxor c_i32_0 in
    let bxor_i64_0: i64 = c_i64_0 bxor c_i64_0 in
    let bxor_u8_0: u8 = c_u8_0 bxor c_u8_0 in
    let bxor_u16_0: u16 = c_u16_0 bxor c_u16_0 in
    let bxor_u32_0: u32 = c_u32_0 bxor c_u32_0 in
    let bxor_u64_0: u64 = c_u64_0 bxor c_u64_0 in
    let pow_f32_0: f32 = c_f32_0 ** c1_f32_0 in
    let pow_f64_0: f64 = c_f64_0 ** c1_f64_0 in
    unit
}

