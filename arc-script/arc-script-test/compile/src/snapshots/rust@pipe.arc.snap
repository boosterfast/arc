---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/pipe.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    pub fn foo(x_0: i32) -> i32 {
        let x_1: i32 = (x_0.clone()) + (x_0.clone());
        (x_1.clone())
    }
    pub fn bar(x_2: i32) -> i32 {
        let x_3: Box<dyn arcorn::ArcornFn(i32) -> i32> =
            Box::new(foo) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
        let x_4: Box<dyn arcorn::ArcornFn(i32) -> i32> =
            Box::new(foo) as Box<dyn arcorn::ArcornFn(i32) -> i32>;
        let x_5: i32 = (x_4.clone())((x_2.clone()));
        let x_6: i32 = (x_3.clone())((x_5.clone()));
        (x_6.clone())
    }
    #[arcorn::rewrite(on_event = "Baz_on_event", on_start = "Baz_on_start")]
    mod Baz_mod {
        struct Baz {}
        #[arcorn::rewrite]
        pub enum Baz_IInterface {
            Baz_IInterface___(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Baz_OInterface {
            Baz_OInterface___(Struct3keyi325valuei32End),
        }
    }
    impl Baz_mod::Baz {
        pub fn Baz_on_event(&mut self, x_A: Baz_IInterface) -> () {
            let x_7: Struct3keyi325valuei32End = arcorn::unwrap!(Baz_IInterface___, (x_A.clone()));
            let x_8: i32 = (x_7.clone()).value;
            let x_9: i32 = (x_7.clone()).key;
            let x_B: Struct3keyi325valuei32End = Struct3keyi325valuei32End {
                value: (x_8.clone()),
                key: (x_9.clone()),
            };
            let x_C: Baz_OInterface = arcorn::enwrap!(Baz_OInterface___, (x_B.clone()));
            let x_D: () = self.emit((x_C.clone()));
            (x_D.clone())
        }
        pub fn Baz_on_start(&mut self) -> () {
            let x_F: () = ();
            (x_F.clone())
        }
    }
    pub fn qux(
        s_0: arcorn::Stream<Struct3keyi325valuei32End>,
    ) -> arcorn::Stream<Struct3keyi325valuei32End> {
        let x_G: Box<
            dyn arcorn::ArcornFn() -> Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<Struct3keyi325valuei32End>,
                ) -> arcorn::Stream<Struct3keyi325valuei32End>,
            >,
        > = Box::new(Baz)
            as Box<
                dyn arcorn::ArcornFn() -> Box<
                    dyn arcorn::ArcornFn(
                        arcorn::Stream<Struct3keyi325valuei32End>,
                    )
                        -> arcorn::Stream<Struct3keyi325valuei32End>,
                >,
            >;
        let x_H: Box<
            dyn arcorn::ArcornFn(
                arcorn::Stream<Struct3keyi325valuei32End>,
            ) -> arcorn::Stream<Struct3keyi325valuei32End>,
        > = (x_G.clone())();
        let x_I: Box<
            dyn arcorn::ArcornFn() -> Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<Struct3keyi325valuei32End>,
                ) -> arcorn::Stream<Struct3keyi325valuei32End>,
            >,
        > = Box::new(Baz)
            as Box<
                dyn arcorn::ArcornFn() -> Box<
                    dyn arcorn::ArcornFn(
                        arcorn::Stream<Struct3keyi325valuei32End>,
                    )
                        -> arcorn::Stream<Struct3keyi325valuei32End>,
                >,
            >;
        let x_J: Box<
            dyn arcorn::ArcornFn(
                arcorn::Stream<Struct3keyi325valuei32End>,
            ) -> arcorn::Stream<Struct3keyi325valuei32End>,
        > = (x_I.clone())();
        let x_K: arcorn::Stream<Struct3keyi325valuei32End> = (x_J.clone())((s_0.clone()));
        let x_L: arcorn::Stream<Struct3keyi325valuei32End> = (x_H.clone())((x_K.clone()));
        (x_L.clone())
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


