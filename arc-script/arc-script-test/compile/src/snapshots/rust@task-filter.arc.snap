---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/expect-mlir-fail-todo/task-filter.arc
---
use arc_script::arcorn;
use arcon::prelude::*;
pub struct HandlerFilter<
    'i,
    'source,
    'timer,
    'channel,
    O: 'static + Operator,
    B: Backend,
    C: ComponentDefinition,
> {
    pub op: &'i mut O,
    pub ctx: &'i mut OperatorContext<'source, 'timer, 'channel, O, B, C>,
    pub timestamp: Option<u64>,
}
#[derive(ArconState)]
pub struct TaskFilter {
    #[ephemeral]
    pub p_0: fn(i32) -> bool,
}
fn Filter(p_0: fn(i32) -> bool) -> OperatorBuilder<TaskFilter> {
    OperatorBuilder {
        constructor: Arc::new(move |b| TaskFilter { p_0 }),
        conf: Default::default(),
    }
}
impl Operator for TaskFilter {
    type IN = Struct5valuei32End;
    type OUT = Struct5valuei32End;
    type TimerState = ArconNever;
    type OperatorState = Self;
    fn handle_element(
        &mut self,
        elem: ArconElement<Self::IN>,
        ref mut ctx: OperatorContext<Self, impl Backend, impl ComponentDefinition>,
    ) -> OperatorResult<()> {
        let ArconElement { timestamp, data } = elem;
        let event = data.value;
        let mut handler = HandlerFilter {
            op: self,
            ctx,
            timestamp,
        };
        handler.handle(event);
        Ok(())
    }
    arcon::ignore_timeout!();
    arcon::ignore_persist!();
}
impl<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition>
    HandlerFilter<'i, 'source, 'timer, 'channel, TaskFilter, B, C>
{
    fn handle(&mut self, event_0: i32) -> OperatorResult<()> {
        if (self.op.p_0)(event_0) {
            self.emit(event_0)
        } else {
            ()
        };
        Ok(())
    }
    fn emit(&mut self, event_0: i32) {
        let data = Struct5valuei32End { value: event_0 };
        let elem = ArconElement {
            data,
            timestamp: self.timestamp,
        };
        self.ctx.output(elem);
    }
}
pub fn x_0(x_1: i32) -> bool {
    x_1 % 2i32 == 0i32
}
pub fn main(stream0_0: Stream<Struct5valuei32End>) -> Stream<Struct5valuei32End> {
    let stream1_0: Stream<Struct5valuei32End> = Stream::operator(stream0_0, Filter(x_0));
    stream1_0
}
#[arcorn::rewrite]
#[derive(Copy)]
pub struct Struct5valuei32End {
    value: i32,
}


