---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/enum_pattern_nested.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    #[arcorn::rewrite]
    pub enum Baz {
        Baz_Some(i32),
        Baz_None(Unit),
    }
    #[arcorn::rewrite]
    pub enum Foo {
        Foo_Bar(Baz),
        Foo_None(Unit),
    }
    pub fn x_9() -> Unit {
        let x_8: Unit = ();
        arcorn::val!(x_8)
    }
    pub fn main() -> Unit {
        let x_0: i32 = 5i32;
        let x_1: Baz = arcorn::enwrap!(Baz_Some, arcorn::val!(x_0));
        let x_2: Foo = arcorn::enwrap!(Foo_Bar, arcorn::val!(x_1));
        let x_3: bool = arcorn::is!(Foo_Bar, arcorn::val!(x_2));
        let x_D: Unit = if arcorn::val!(x_3) {
            let x_4: Baz = arcorn::unwrap!(Foo_Bar, arcorn::val!(x_2));
            let x_5: bool = arcorn::is!(Baz_Some, arcorn::val!(x_4));
            let x_C: Unit = if arcorn::val!(x_5) {
                let x_6: i32 = arcorn::unwrap!(Baz_Some, arcorn::val!(x_4));
                let x_7: Unit = ();
                arcorn::val!(x_7)
            } else {
                let x_A: Box<dyn arcorn::ArcornFn() -> Unit> =
                    Box::new(x_9) as Box<dyn arcorn::ArcornFn() -> Unit>;
                let x_B: Unit = arcorn::val!(x_A)();
                arcorn::val!(x_B)
            };
            arcorn::val!(x_C)
        } else {
            let x_A: Box<dyn arcorn::ArcornFn() -> Unit> =
                Box::new(x_9) as Box<dyn arcorn::ArcornFn() -> Unit>;
            let x_B: Unit = arcorn::val!(x_A)();
            arcorn::val!(x_B)
        };
        arcorn::val!(x_D)
    }
}
pub use arc_script_output::*;


