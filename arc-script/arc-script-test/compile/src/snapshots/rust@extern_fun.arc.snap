---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_mlir_fail_todo/extern_fun.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
pub mod defs {
    use super::*;
    pub use arc_script::arcorn;
    pub use arc_script::arcorn::state::{ArcMapOps, ArcRefOps, ArcSetOps, ArcVecOps};
    pub use arcon::prelude::*;
    pub struct Adder<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition> {
        pub data: &'i mut AdderData,
        pub ctx: &'i mut OperatorContext<'source, 'timer, 'channel, AdderData, B, C>,
        pub timestamp: Option<u64>,
    }
    pub struct AdderData {
        pub state: AdderState,
    }
    #[derive(ArconState)]
    pub struct AdderState {}
    impl StateConstructor for AdderState {
        type BackendType = Sled;
        fn new(backend: Arc<Self::BackendType>) -> Self {
            Self {}
        }
    }
    impl AdderData {
        fn new() -> OperatorBuilder<AdderData> {
            OperatorBuilder {
                constructor: Arc::new(move |backend| AdderData {
                    state: AdderState {},
                }),
                conf: Default::default(),
            }
        }
    }
    impl Operator for AdderData {
        type IN = Struct5valuei32End;
        type OUT = Struct5valuei32End;
        type TimerState = ArconNever;
        type OperatorState = AdderState;
        fn handle_element(
            &mut self,
            elem: ArconElement<Self::IN>,
            ref mut ctx: OperatorContext<Self, impl Backend, impl ComponentDefinition>,
        ) -> OperatorResult<()> {
            let ArconElement { timestamp, data } = elem;
            let event = data.value;
            let mut task = Adder {
                data: self,
                ctx,
                timestamp,
            };
            task.handle(event);
            Ok(())
        }
        fn state(&mut self) -> &mut Self::OperatorState {
            &mut self.state
        }
        arcon::ignore_timeout!();
        arcon::ignore_persist!();
    }
    impl<'i, 'source, 'timer, 'channel, B: Backend, C: ComponentDefinition>
        Adder<'i, 'source, 'timer, 'channel, B, C>
    {
        fn handle(&mut self, event_0: i32) -> OperatorResult<()> {
            {
                let y_1_0 = self.addition(event_0, event_0);
                self.emit(y_1_0)
            };
            Ok(())
        }
        fn emit(&mut self, event_0: i32) {
            let data = Struct5valuei32End { value: event_0 };
            let elem = ArconElement {
                data,
                timestamp: self.timestamp,
            };
            self.ctx.output(elem);
        }
    }
    pub fn pipe(s_0: Stream<Struct5valuei32End>) -> Stream<Struct5valuei32End> {
        let y_1_0 = 1i32;
        let y_1_1 = increment(y_1_0);
        let y_1_2 = 2i32;
        let y_1_3 = y_1_1 == y_1_2;
        let y_1_4 = if y_1_3 {
            let y_2_0 = AdderData::new();
            let y_2_1 = Stream::operator(s_0, y_2_0);
            y_2_1
        } else {
            let y_2_0 = AdderData::new();
            let y_2_1 = Stream::operator(s_0, y_2_0);
            y_2_1
        };
        y_1_4
    }
    #[arcorn::rewrite]
    #[derive(Copy)]
    pub struct Struct5valuei32End {
        value: i32,
    }
}
pub use defs::*;


