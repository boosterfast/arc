---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/binops.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    pub fn main() -> Unit {
        let x_0: bool = true;
        let x_1: i8 = 127i8;
        let x_2: i16 = 32767i16;
        let x_3: i32 = 2147483647i32;
        let x_4: i64 = 9223372036854775807i64;
        let x_5: u8 = 255u8;
        let x_6: u16 = 65535u16;
        let x_7: u32 = 4294967295u32;
        let x_8: u64 = 18446744073709551615u64;
        let x_9: f32 = 340282350000000000000000000000000000000f32;
        let x_A : f64 = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64 ;
        let x_B: i8 = 126i8;
        let x_C: i16 = 32766i16;
        let x_D: i32 = 2147483646i32;
        let x_E: i64 = 9223372036854775806i64;
        let x_F: u8 = 254u8;
        let x_G: u16 = 65534u16;
        let x_H: u32 = 4294967294u32;
        let x_I: u64 = 18446744073709551614u64;
        let x_J: f32 = 34028235000000000000000000000000000000f32;
        let x_K : f64 = 179769313486231550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64 ;
        let x_L: i8 = (x_1.clone()) + (x_1.clone());
        let x_M: i16 = (x_2.clone()) + (x_2.clone());
        let x_N: i32 = (x_3.clone()) + (x_3.clone());
        let x_O: i64 = (x_4.clone()) + (x_4.clone());
        let x_P: u8 = (x_5.clone()) + (x_5.clone());
        let x_Q: u16 = (x_6.clone()) + (x_6.clone());
        let x_R: u32 = (x_7.clone()) + (x_7.clone());
        let x_S: u64 = (x_8.clone()) + (x_8.clone());
        let x_T: f32 = (x_9.clone()) + (x_9.clone());
        let x_U: f64 = (x_A.clone()) + (x_A.clone());
        let x_V: i8 = (x_1.clone()) - (x_1.clone());
        let x_W: i16 = (x_2.clone()) - (x_2.clone());
        let x_X: i32 = (x_3.clone()) - (x_3.clone());
        let x_Y: i64 = (x_4.clone()) - (x_4.clone());
        let x_Z: u8 = (x_5.clone()) - (x_5.clone());
        let x_a: u16 = (x_6.clone()) - (x_6.clone());
        let x_b: u32 = (x_7.clone()) - (x_7.clone());
        let x_c: u64 = (x_8.clone()) - (x_8.clone());
        let x_d: f32 = (x_9.clone()) - (x_9.clone());
        let x_e: f64 = (x_A.clone()) - (x_A.clone());
        let x_f: i8 = (x_1.clone()) * (x_1.clone());
        let x_g: i16 = (x_2.clone()) * (x_2.clone());
        let x_h: i32 = (x_3.clone()) * (x_3.clone());
        let x_i: i64 = (x_4.clone()) * (x_4.clone());
        let x_j: u8 = (x_5.clone()) * (x_5.clone());
        let x_k: u16 = (x_6.clone()) * (x_6.clone());
        let x_l: u32 = (x_7.clone()) * (x_7.clone());
        let x_m: u64 = (x_8.clone()) * (x_8.clone());
        let x_n: f32 = (x_9.clone()) * (x_9.clone());
        let x_o: f64 = (x_A.clone()) * (x_A.clone());
        let x_p: i8 = (x_1.clone()) / (x_1.clone());
        let x_q: i16 = (x_2.clone()) / (x_2.clone());
        let x_r: i32 = (x_3.clone()) / (x_3.clone());
        let x_s: i64 = (x_4.clone()) / (x_4.clone());
        let x_t: u8 = (x_5.clone()) / (x_5.clone());
        let x_u: u16 = (x_6.clone()) / (x_6.clone());
        let x_v: u32 = (x_7.clone()) / (x_7.clone());
        let x_w: u64 = (x_8.clone()) / (x_8.clone());
        let x_x: f32 = (x_9.clone()) / (x_9.clone());
        let x_y: f64 = (x_A.clone()) / (x_A.clone());
        let x_z: i8 = (x_1.clone()) % (x_1.clone());
        let x__0: i16 = (x_2.clone()) % (x_2.clone());
        let x__1: i32 = (x_3.clone()) % (x_3.clone());
        let x__2: i64 = (x_4.clone()) % (x_4.clone());
        let x__3: u8 = (x_5.clone()) % (x_5.clone());
        let x__4: u16 = (x_6.clone()) % (x_6.clone());
        let x__5: u32 = (x_7.clone()) % (x_7.clone());
        let x__6: u64 = (x_8.clone()) % (x_8.clone());
        let x__7: f32 = (x_9.clone()) % (x_9.clone());
        let x__8: f64 = (x_A.clone()) % (x_A.clone());
        let x__9: bool = (x_1.clone()) <= (x_1.clone());
        let x__A: bool = (x_2.clone()) <= (x_2.clone());
        let x__B: bool = (x_3.clone()) <= (x_3.clone());
        let x__C: bool = (x_4.clone()) <= (x_4.clone());
        let x__D: bool = (x_5.clone()) <= (x_5.clone());
        let x__E: bool = (x_6.clone()) <= (x_6.clone());
        let x__F: bool = (x_7.clone()) <= (x_7.clone());
        let x__G: bool = (x_8.clone()) <= (x_8.clone());
        let x__H: bool = (x_9.clone()) <= (x_9.clone());
        let x__I: bool = (x_A.clone()) <= (x_A.clone());
        let x__J: bool = (x_1.clone()) < (x_1.clone());
        let x__K: bool = (x_2.clone()) < (x_2.clone());
        let x__L: bool = (x_3.clone()) < (x_3.clone());
        let x__M: bool = (x_4.clone()) < (x_4.clone());
        let x__N: bool = (x_5.clone()) < (x_5.clone());
        let x__O: bool = (x_6.clone()) < (x_6.clone());
        let x__P: bool = (x_7.clone()) < (x_7.clone());
        let x__Q: bool = (x_8.clone()) < (x_8.clone());
        let x__R: bool = (x_9.clone()) < (x_9.clone());
        let x__S: bool = (x_A.clone()) < (x_A.clone());
        let x__T: bool = (x_1.clone()) > (x_1.clone());
        let x__U: bool = (x_2.clone()) > (x_2.clone());
        let x__V: bool = (x_3.clone()) > (x_3.clone());
        let x__W: bool = (x_4.clone()) > (x_4.clone());
        let x__X: bool = (x_5.clone()) > (x_5.clone());
        let x__Y: bool = (x_6.clone()) > (x_6.clone());
        let x__Z: bool = (x_7.clone()) > (x_7.clone());
        let x__a: bool = (x_8.clone()) > (x_8.clone());
        let x__b: bool = (x_9.clone()) > (x_9.clone());
        let x__c: bool = (x_A.clone()) > (x_A.clone());
        let x__d: bool = (x_1.clone()) >= (x_1.clone());
        let x__e: bool = (x_2.clone()) >= (x_2.clone());
        let x__f: bool = (x_3.clone()) >= (x_3.clone());
        let x__g: bool = (x_4.clone()) >= (x_4.clone());
        let x__h: bool = (x_5.clone()) >= (x_5.clone());
        let x__i: bool = (x_6.clone()) >= (x_6.clone());
        let x__j: bool = (x_7.clone()) >= (x_7.clone());
        let x__k: bool = (x_8.clone()) >= (x_8.clone());
        let x__l: bool = (x_9.clone()) >= (x_9.clone());
        let x__m: bool = (x_A.clone()) >= (x_A.clone());
        let x__n: bool = (x_0.clone()) == (x_0.clone());
        let x__o: bool = (x_1.clone()) == (x_1.clone());
        let x__p: bool = (x_2.clone()) == (x_2.clone());
        let x__q: bool = (x_3.clone()) == (x_3.clone());
        let x__r: bool = (x_4.clone()) == (x_4.clone());
        let x__s: bool = (x_5.clone()) == (x_5.clone());
        let x__t: bool = (x_6.clone()) == (x_6.clone());
        let x__u: bool = (x_7.clone()) == (x_7.clone());
        let x__v: bool = (x_8.clone()) == (x_8.clone());
        let x__w: bool = (x_9.clone()) == (x_9.clone());
        let x__x: bool = (x_A.clone()) == (x_A.clone());
        let x__y: bool = (x_0.clone()) != (x_0.clone());
        let x__z: bool = (x_1.clone()) != (x_1.clone());
        let x___0: bool = (x_2.clone()) != (x_2.clone());
        let x___1: bool = (x_3.clone()) != (x_3.clone());
        let x___2: bool = (x_4.clone()) != (x_4.clone());
        let x___3: bool = (x_5.clone()) != (x_5.clone());
        let x___4: bool = (x_6.clone()) != (x_6.clone());
        let x___5: bool = (x_7.clone()) != (x_7.clone());
        let x___6: bool = (x_8.clone()) != (x_8.clone());
        let x___7: bool = (x_9.clone()) != (x_9.clone());
        let x___8: bool = (x_A.clone()) != (x_A.clone());
        let x___9: bool = (x_0.clone()) && (x_0.clone());
        let x___A: bool = (x_0.clone()) || (x_0.clone());
        let x___B: bool = (x_0.clone()) ^ (x_0.clone());
        let x___C: i8 = (x_1.clone()) & (x_1.clone());
        let x___D: i16 = (x_2.clone()) & (x_2.clone());
        let x___E: i32 = (x_3.clone()) & (x_3.clone());
        let x___F: i64 = (x_4.clone()) & (x_4.clone());
        let x___G: u8 = (x_5.clone()) & (x_5.clone());
        let x___H: u16 = (x_6.clone()) & (x_6.clone());
        let x___I: u32 = (x_7.clone()) & (x_7.clone());
        let x___J: u64 = (x_8.clone()) & (x_8.clone());
        let x___K: i8 = (x_1.clone()) | (x_1.clone());
        let x___L: i16 = (x_2.clone()) | (x_2.clone());
        let x___M: i32 = (x_3.clone()) | (x_3.clone());
        let x___N: i64 = (x_4.clone()) | (x_4.clone());
        let x___O: u8 = (x_5.clone()) | (x_5.clone());
        let x___P: u16 = (x_6.clone()) | (x_6.clone());
        let x___Q: u32 = (x_7.clone()) | (x_7.clone());
        let x___R: u64 = (x_8.clone()) | (x_8.clone());
        let x___S: i8 = (x_1.clone()) ^ (x_1.clone());
        let x___T: i16 = (x_2.clone()) ^ (x_2.clone());
        let x___U: i32 = (x_3.clone()) ^ (x_3.clone());
        let x___V: i64 = (x_4.clone()) ^ (x_4.clone());
        let x___W: u8 = (x_5.clone()) ^ (x_5.clone());
        let x___X: u16 = (x_6.clone()) ^ (x_6.clone());
        let x___Y: u32 = (x_7.clone()) ^ (x_7.clone());
        let x___Z: u64 = (x_8.clone()) ^ (x_8.clone());
        let x___a: f32 = (x_9.clone()).powf((x_J.clone()));
        let x___b: f64 = (x_A.clone()).powf((x_K.clone()));
        let x___c: Unit = ();
        (x___c.clone())
    }
}
pub use arc_script_output::*;


