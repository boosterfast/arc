---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/basic_by.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    pub fn test() -> i32 {
        let x_0: i32 = 1i32;
        let x_1: i32 = 2i32;
        let x_2: Struct3keyi325valuei32End = arc_script::arcorn::new!(Struct3keyi325valuei32End {
            value: (x_0.clone()),
            key: (x_1.clone())
        });
        let x_3: i32 = arcorn::access!((x_2.clone()), value);
        let x_4: i32 = arcorn::access!((x_2.clone()), key);
        let x_5: i32 = (x_3.clone()) + (x_4.clone());
        (x_5.clone())
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


