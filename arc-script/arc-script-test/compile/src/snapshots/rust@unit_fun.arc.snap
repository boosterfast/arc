---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/unit_fun.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    pub fn foo(x_0: ()) -> () {
        (x_0.clone())
    }
    pub fn bar() -> () {
        let x_1: Box<dyn arcorn::ArcornFn(()) -> ()> =
            Box::new(foo) as Box<dyn arcorn::ArcornFn(()) -> ()>;
        let x_2: () = ();
        let x_3: () = (x_1.clone())((x_2.clone()));
        (x_3.clone())
    }
}
pub use arc_script_output::*;


