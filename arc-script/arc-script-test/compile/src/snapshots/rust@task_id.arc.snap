---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/task_id.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    #[arcorn::rewrite(on_event = "Identity_on_event", on_start = "Identity_on_start")]
    mod Identity_mod {
        struct Identity {}
        #[arcorn::rewrite]
        pub enum Identity_IInterface {
            Identity_IInterface_A(Struct3keyi325valuei32End),
        }
        #[arcorn::rewrite]
        pub enum Identity_OInterface {
            Identity_OInterface_B(Struct3keyi325valuei32End),
        }
    }
    impl Identity_mod::Identity {
        pub fn Identity_on_event(&mut self, x_0: Identity_IInterface) -> Unit {
            let x_1: bool = arcorn::is!(Identity_IInterface_A, arcorn::val!(x_0));
            let x_6: Unit = if arcorn::val!(x_1) {
                let x_2: Struct3keyi325valuei32End =
                    arcorn::unwrap!(Identity_IInterface_A, arcorn::val!(x_0));
                let x_3: Identity_OInterface =
                    arcorn::enwrap!(Identity_OInterface_B, arcorn::val!(x_2));
                let x_4: Unit = self.emit(arcorn::val!(x_3));
                arcorn::val!(x_4)
            } else {
                let x_5: Unit = unreachable!();
                arcorn::val!(x_5)
            };
            arcorn::val!(x_6)
        }
        pub fn Identity_on_start(&mut self) -> Unit {
            let x_7: Unit = ();
            arcorn::val!(x_7)
        }
    }
    pub fn main(
        input_0: arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T>,
    ) -> arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T> {
        let x_8: Box<
            dyn arcorn::ArcornFn() -> Box<
                dyn arcorn::ArcornFn(
                    arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T>,
                ) -> arcorn::Stream<
                    <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
                >,
            >,
        > = Box::new(Identity)
            as Box<
                dyn arcorn::ArcornFn() -> Box<
                    dyn arcorn::ArcornFn(
                        arcorn::Stream<
                            <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
                        >,
                    ) -> arcorn::Stream<
                        <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
                    >,
                >,
            >;
        let x_9: Box<
            dyn arcorn::ArcornFn(
                arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T>,
            ) -> arcorn::Stream<
                <Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T,
            >,
        > = arcorn::val!(x_8)();
        let x_A: arcorn::Stream<<Struct3keyi325valuei32End as arc_script::arcorn::Convert>::T> =
            arcorn::val!(x_9)(arcorn::val!(input_0));
        arcorn::val!(x_A)
    }
    #[arcorn::rewrite]
    pub struct Struct3keyi325valuei32End {
        key: i32,
        value: i32,
    }
}
pub use arc_script_output::*;


