---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/structs.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
pub mod defs {
    use super::*;
    pub use arc_script::arcorn;
    pub use arc_script::arcorn::state::{ArcMapOps, ArcRefOps, ArcSetOps, ArcVecOps};
    pub use arcon::prelude::*;
    pub fn foo(
        a_0: Struct1bi321ci32End,
        b_0: Struct1bi321ci32End,
    ) -> Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End {
        let y_1_0 = 4711i32;
        let y_1_1 = Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End {
            a: a_0,
            xyz: y_1_0,
            d: b_0,
        };
        y_1_1
    }
    pub fn test() -> () {
        let y_1_0 = 1i32;
        let y_1_1 = 5i32;
        let y_1_2 = Struct1bi321ci32End { c: y_1_0, b: y_1_1 };
        let y_1_3 = 4i32;
        let y_1_4 = 2i32;
        let y_1_5 = Struct1bi321ci32End { b: y_1_3, c: y_1_4 };
        let y_1_6 = foo(y_1_2, y_1_5);
        let y_1_7 = ();
        y_1_7
    }
    #[arcorn::rewrite]
    #[derive(Copy)]
    pub struct Struct1bi321ci32End {
        b: i32,
        c: i32,
    }
    #[arcorn::rewrite]
    #[derive(Copy)]
    pub struct Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End {
        a: Struct1bi321ci32End,
        d: Struct1bi321ci32End,
        xyz: i32,
    }
}
pub use defs::*;


