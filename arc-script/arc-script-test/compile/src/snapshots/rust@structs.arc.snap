---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/structs.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    use arc_script::arcorn::*;
    pub fn foo(
        a_0: Struct1bi321ci32End,
        b_0: Struct1bi321ci32End,
    ) -> Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End {
        let x_0: i32 = 4711i32;
        let x_1: Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End =
            arc_script::arcorn::new!(Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End {
                a: (a_0.clone()),
                xyz: (x_0.clone()),
                d: (b_0.clone())
            });
        (x_1.clone())
    }
    pub fn test() -> Unit {
        let x_2: Box<
            dyn arcorn::ArcornFn(
                Struct1bi321ci32End,
                Struct1bi321ci32End,
            )
                -> Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End,
        > = Box::new(foo)
            as Box<
                dyn arcorn::ArcornFn(
                    Struct1bi321ci32End,
                    Struct1bi321ci32End,
                )
                    -> Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End,
            >;
        let x_3: i32 = 1i32;
        let x_4: i32 = 5i32;
        let x_5: Struct1bi321ci32End = arc_script::arcorn::new!(Struct1bi321ci32End {
            c: (x_3.clone()),
            b: (x_4.clone())
        });
        let x_6: i32 = 4i32;
        let x_7: i32 = 2i32;
        let x_8: Struct1bi321ci32End = arc_script::arcorn::new!(Struct1bi321ci32End {
            b: (x_6.clone()),
            c: (x_7.clone())
        });
        let x_9: Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End =
            (x_2.clone())((x_5.clone()), (x_8.clone()));
        let x_A: Unit = ();
        (x_A.clone())
    }
    #[arcorn::rewrite]
    pub struct Struct1bi321ci32End {
        b: i32,
        c: i32,
    }
    #[arcorn::rewrite]
    pub struct Struct1aStruct1bi321ci32End1dStruct1bi321ci32End3xyzi32End {
        a: Struct1bi321ci32End,
        d: Struct1bi321ci32End,
        xyz: i32,
    }
}
pub use arc_script_output::*;


