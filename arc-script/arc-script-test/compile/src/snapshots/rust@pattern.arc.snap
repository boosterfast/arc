---
source: arc-script-test/compile/src/insta.rs
expression: s
input_file: arc-script-test/compile/src/tests/expect_pass/pattern.arc

---
#[allow(non_snake_case)]
#[allow(unused_must_use)]
#[allow(dead_code)]
#[allow(unused_variables)]
#[allow(unused_imports)]
#[allow(unused_braces)]
#[allow(irrefutable_let_patterns)]
#[allow(clippy::redundant_field_names)]
#[allow(clippy::unused_unit)]
#[allow(clippy::double_parens)]
pub mod arc_script_output {
    use super::*;
    use arc_script::arcorn;
    pub fn main() -> () {
        let x_0: i32 = 1i32;
        let x_1: i32 = 2i32;
        let x_2: (i32, i32) = ((x_0.clone()), (x_1.clone()));
        let x_3: i32 = 3i32;
        let x_4: i32 = 4i32;
        let x_5: (i32, i32) = ((x_3.clone()), (x_4.clone()));
        let x_6: ((i32, i32), (i32, i32)) = ((x_2.clone()), (x_5.clone()));
        let x_7: (i32, i32) = (x_6.clone()).0;
        let x_8: i32 = (x_7.clone()).0;
        let x_9: i32 = (x_7.clone()).1;
        let x_A: (i32, i32) = (x_6.clone()).1;
        let x_B: i32 = (x_A.clone()).0;
        let x_C: i32 = (x_A.clone()).1;
        let x_D: () = ();
        (x_D.clone())
    }
}
pub use arc_script_output::*;


