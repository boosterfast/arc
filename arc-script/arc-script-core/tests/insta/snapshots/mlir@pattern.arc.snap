---
source: arc-script-core/tests/insta/mod.rs
expression: s
input_file: arc-script-core/tests/insta/snapshot-tests/pattern.arc
---
module @toplevel {
    func @main() -> i0 {
        %x_3 = arc.constant 1 : si32
        %x_4 = arc.constant 2 : si32
        %x_5 = "arc.make_tuple"(%x_3, %x_4) : (si32, si32) -> tuple<si32, si32>
        %x_6 = arc.constant 3 : si32
        %x_7 = arc.constant 4 : si32
        %x_8 = "arc.make_tuple"(%x_6, %x_7) : (si32, si32) -> tuple<si32, si32>
        %x_9 = "arc.make_tuple"(%x_5, %x_8) : (tuple<si32, si32>, tuple<si32, si32>) -> tuple<tuple<si32, si32>, tuple<si32, si32>>
        %x_A = "arc.index_tuple"(%x_9) { index = 0 } : tuple<tuple<si32, si32>, tuple<si32, si32>> -> tuple<si32, si32>
        %x_B = "arc.index_tuple"(%x_A) { index = 0 } : tuple<si32, si32> -> si32
        %x_C = "arc.index_tuple"(%x_A) { index = 1 } : tuple<si32, si32> -> si32
        %x_D = "arc.index_tuple"(%x_9) { index = 1 } : tuple<tuple<si32, si32>, tuple<si32, si32>> -> tuple<si32, si32>
        %x_E = "arc.index_tuple"(%x_D) { index = 0 } : tuple<si32, si32> -> si32
        %x_F = "arc.index_tuple"(%x_D) { index = 1 } : tuple<si32, si32> -> si32
        %x_G = arc.constant unit : i0
        return %x_G : i0
    }
}

