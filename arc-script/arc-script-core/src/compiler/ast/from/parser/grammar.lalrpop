use crate::compiler::ast::*;
use crate::compiler::info::files::{FileId, ByteIndex};
use crate::compiler::info::paths::{PathInterner, PathId};
use crate::compiler::info::names::{NameInterner, NameId};
use crate::compiler::info::diags::{DiagInterner, Diagnostic};
use crate::compiler::ast::from::lexer::Token;
use lalrpop_util::ErrorRecovery;
use time::Duration;
use half::f16;
use half::bf16;

//=============================================================================
// Grammar
//=============================================================================

grammar(
    file: FileId,
    exprs: &mut ExprInterner,
    diags: &mut DiagInterner,
    paths: &mut PathInterner,
);

extern {
    type Error = ();
    type Location = ByteIndex;

    enum Token {
        Indent => Token::Indent,
        Dedent => Token::Dedent,
//=============================================================================
// Grouping
//=============================================================================
        "{"    => Token::BraceL,
        "}"    => Token::BraceR,
        "["    => Token::BrackL,
        "]"    => Token::BrackR,
        "("    => Token::ParenL,
        ")"    => Token::ParenR,
//=============================================================================
// Operators
//=============================================================================
        "&"   => Token::Amp,
        "&&"  => Token::AmpAmp,
        "<-"  => Token::ArrowL,
        "->"  => Token::ArrowR,
        "@"   => Token::AtSign,
        "!"   => Token::Bang,
        "|"   => Token::Bar,
        "||"  => Token::BarBar,
        "^"   => Token::Caret,
        ":"   => Token::Colon,
        "::"  => Token::ColonColon,
        ":="  => Token::ColonEq,
        ","   => Token::Comma,
        "$"   => Token::Dollar,
        "."   => Token::Dot,
        ".."  => Token::DotDot,
        "="   => Token::Equ,
        "=="  => Token::EquEqu,
        ">="  => Token::Geq,
        ">"   => Token::Gt,
        "=>"  => Token::Imply,
        "<="  => Token::Leq,
        "<"   => Token::Lt,
        "<>"  => Token::LtGt,
        "-"   => Token::Minus,
        "!="  => Token::Neq,
        "%"   => Token::Percent,
        "|>"  => Token::Pipe,
        "+"   => Token::Plus,
        "?"   => Token::Qm,
        "???" => Token::QmQmQm,
        ";"   => Token::Semi,
        ";;"  => Token::SemiSemi,
        "/"   => Token::Slash,
        "*"   => Token::Star,
        "**"  => Token::StarStar,
        "~"   => Token::Tilde,
        "_"   => Token::Underscore,
//=============================================================================
// Keywords
//=============================================================================
        "and"    => Token::And,
        "as"     => Token::As,
        "band"   => Token::Band,
        "bor"    => Token::Bor,
        "bxor"   => Token::Bxor,
        "break"  => Token::Break,
        "crate"  => Token::Crate,
        "else"   => Token::Else,
        "emit"   => Token::Emit,
        "enum"   => Token::Enum,
        "extern" => Token::Extern,
        "for"    => Token::For,
        "fun"    => Token::Fun,
        "if"     => Token::If,
        "in"     => Token::In,
        "is"     => Token::Is,
        "let"    => Token::Let,
        "log"    => Token::Log,
        "loop"   => Token::Loop,
        "match"  => Token::Match,
        "not"    => Token::Not,
        "on"     => Token::On,
        "or"     => Token::Or,
        "reduce" => Token::Reduce,
        "return" => Token::Return,
        "state"  => Token::State,
        "task"   => Token::Task,
        "type"   => Token::Type,
        "unwrap" => Token::Unwrap,
        "enwrap" => Token::Enwrap,
        "use"    => Token::Use,
        "xor"    => Token::Xor,
//=============================================================================
// Reserved Keywords
//=============================================================================
        "after"    => Token::After,
        "end"      => Token::End,
        "of"       => Token::Of,
        "shutdown" => Token::Shutdown,
        "sink"     => Token::Sink,
        "source"   => Token::Source,
        "then"     => Token::Then,
        "where"    => Token::Where,
//=============================================================================
// Primitive Types
//=============================================================================
        "bool" => Token::Bool,
        "bf16" => Token::Bf16,
        "f16"  => Token::F16,
        "f32"  => Token::F32,
        "f64"  => Token::F64,
        "i8"   => Token::I8,
        "i16"  => Token::I16,
        "i32"  => Token::I32,
        "i64"  => Token::I64,
        "u8"   => Token::U8,
        "u16"  => Token::U16,
        "u32"  => Token::U32,
        "u64"  => Token::U64,
        "null" => Token::Null,
        "str"  => Token::Str,
        "()"   => Token::Unit,
//=============================================================================
// Identifiers and Literals
//=============================================================================
        NameId  => Token::NameId(<NameId>),
        LitI8   => Token::LitI8(<i8>),
        LitI16  => Token::LitI16(<i16>),
        LitI32  => Token::LitI32(<i32>),
        LitI64  => Token::LitI64(<i64>),
        LitU8   => Token::LitU8(<u8>),
        LitU16  => Token::LitU16(<u16>),
        LitU32  => Token::LitU32(<u32>),
        LitU64  => Token::LitU64(<u64>),
        LitBf16 => Token::LitBf16(<bf16>),
        LitF16  => Token::LitF16(<f16>),
        LitF32  => Token::LitF32(<f32>),
        LitF64  => Token::LitF64(<f64>),
        LitBool => Token::LitBool(<bool>),
        LitChar => Token::LitChar(<char>),
        LitStr  => Token::LitStr(<String>),
        LitTime => Token::LitTime(<Duration>),
    }
}

//=============================================================================
// Macros
//=============================================================================

Sep<T, S>:         Vec<T> = <v:(<T> S)*> <e:T?> => v.into_iter().chain(e).collect();
SepNonEmpty<T, S>: Vec<T> = <e:T> <v:(S <T>)*> => vec![e].into_iter().chain(v).collect();
SepMulti<T, S>:    Vec<T> = <e:T> <v:(S <T>)+> => vec![e].into_iter().chain(v).collect();
SepTrailing<T, S>: Vec<T> = (<T> S)*;
Vec<T>:            Vec<T> = Sep<T, ",">;
VecNonEmpty<T>:    Vec<T> = SepNonEmpty<T, ",">;
VecMulti<T>:       Vec<T> = SepMulti<T, ",">;
Semi<T>:           Vec<T> = Sep<T, ";">;
Single<T>:         Vec<T> = T => vec![<>];
Box<T>:            Box<T> = T => Box::new(<>);
Err:               ()     = ! => diags.intern(Diagnostic::from(<>, file));
Scope<T>:          T      = Indent <T> Dedent;
Paren<T>:          T      = "(" <T> ")";
Angle<T>:          T      = "<" <T> ">";
Bar<T>:            T      = "|" <T> "|";
Brace<T>:          T      = "{" <T> "}";
Brack<T>:          T      = "[" <T> "]";
ParenSep<T, S>:    Vec<T> = { "()" => Vec::new(), Paren<Sep<T, S>> }
AngleSep<T, S>:    Vec<T> = { "<>" => Vec::new(), Angle<Sep<T, S>> }
BarSep<T, S>:      Vec<T> = { "||" => Vec::new(), Bar<Sep<T, S>> }
ParenVec<T>:       Vec<T> = ParenSep<T, ",">;
AngleVec<T>:       Vec<T> = AngleSep<T, ",">;
BarVec<T>:         Vec<T> = BarSep<T, ",">;
Swap<A, B>:        (B, A) = <a:A> <b:B> => (b, a);
Spanned<T>:        Spanned<T> = @L T @R => Spanned::new(file, <>);

//=============================================================================
// Misc
//=============================================================================

Field<T>: Field<T> = Spanned<(<Name> ":" <T>)>         => Field::from(<>);
Variant:  Variant  = Spanned<(<Name> <Paren<Type0>?>)> => Variant::from(<>);
Case:     Case     = Spanned<(<Pat0> "=>" <Expr0>)>    => Case::from(<>);
Name:     Name     = Spanned<NameId>                   => Name::from(<>);
Path:     Path     = Spanned<PathId>                   => Path::from(<>);
Index:    Index    = Spanned<LitUsize>                 => Index::from(<>);
LitUsize: usize    = LitI32                            => <> as usize;

PathId: PathId = {
    <PathId> "::" <Name> => paths.intern_child(<>),
    Name                 => paths.intern_orphan(<>),
    "crate"              => paths.root,
};

//-----------------------------------------------------------------------------
// Operators
//-----------------------------------------------------------------------------

BinaryInfixLeftAssociative<Op, Next>: ExprKind = {
    Expr<BinaryInfixLeftAssociative<Op, Next>> Op Expr<Next> => ExprKind::BinOp(<>),
    Next,
};

BinaryInfixRightAssociative<Op, Next>: ExprKind = {
    Expr<Next> Op Expr<BinaryInfixLeftAssociative<Op, Next>> => ExprKind::BinOp(<>),
    Next,
};

UnaryPostfix<Op, Next>: ExprKind = {
    <e:Expr<UnaryPostfix<Op, Next>>> <op:Op> => ExprKind::UnOp(op, e),
    Next,
};

UnaryPrefix<Op, Next>: ExprKind = {
    <op:Op> <e:Expr<UnaryPrefix<Op, Next>>> => ExprKind::UnOp(op, e),
    Next,
};

//=============================================================================
// Non-Terminals
//=============================================================================

pub(crate) Module = Item*;

//=============================================================================
// Settings
//=============================================================================

Settings: Vec<Setting> = "@" <Brack<Vec<Setting>>>;

Setting: Setting = Spanned<SettingKind> => Setting::from(<>);

SettingKind: SettingKind = {
    Name Paren<LitKind> => SettingKind::Calibrate(<>),
    Name              => SettingKind::Activate(<>),
};

//=============================================================================
// Items
//=============================================================================

Params  = ParenVec<Param>;
Ports   = AngleVec<Variant>;

Hub: Hub = Spanned<HubKind> => Hub::from(<>);

HubKind: HubKind = {
    Ports => HubKind::Tagged(<>),
    Type0 => HubKind::Single(<>),
};

Item: Item = Spanned<Swap<Settings?, ItemKind>> => Item::from(<>);

ItemKind: ItemKind = {
    Extern => ItemKind::Extern(<>),
    Alias  => ItemKind::Alias(<>),
    Enum   => ItemKind::Enum(<>),
    Fun    => ItemKind::Fun(<>),
    Task   => ItemKind::Task(<>),
    Use    => ItemKind::Use(<>),
    Err    => ItemKind::Err,
};

TaskItem: TaskItem = Spanned<Swap<Settings?, TaskItemKind>> => TaskItem::from(<>);

TaskItemKind: TaskItemKind = {
    Fun   => TaskItemKind::Fun(<>),
    Alias => TaskItemKind::Alias(<>),
    Use   => TaskItemKind::Use(<>),
    On    => TaskItemKind::On(<>),
    State => TaskItemKind::State(<>),
    Enum  => TaskItemKind::Enum(<>),
    Err   => TaskItemKind::Err,
};

Extern: Extern = "extern" "fun" <Name> <Params> "->" <Type0> ";"                  => Extern::new(<>);
Fun:    Fun    = "fun" <Name> <Params> <Params?> <("->" <Type0>)?> <Brace<Expr0>> => Fun::new(<>);
Alias:  Alias  = "type" <Name> "=" <Type0>                                        => Alias::new(<>);
Enum:   Enum   = "enum" <Name> <Brace<Vec<Variant>>>                              => Enum::new(<>);
Use:    Use    = "use" <Path> <("as" <Name>)?>                                    => Use::new(<>);
Task:   Task   = "task" <Name> <Params> <Hub> "->" <Hub> <Brace<TaskItem*>>       => Task::new(<>);
On:     On     = "on" <Handler>                                                   => On::new(<>);
State:  State  = "state" <Name> "=" <Expr0>                                       => State::new(<>);

Handler = {
    Brace<VecNonEmpty<Case>>,
    Single<Case>
};

//=============================================================================
// Expressions
//=============================================================================

Expr<Kind>: Expr = Spanned<Arenad<Kind>> => Expr::from(<>);
Expr0 = Expr<ExprKind0>;
Expr1 = Expr<ExprKind1>;
Expr2 = Expr<ExprKind2>;
Expr11 = Expr<ExprKind11>;

Arenad<Kind>: ExprId = Kind => exprs.intern(<>);

//=============================================================================
// Operators
//=============================================================================

BinOp<Kind>: BinOp = Spanned<Kind> => BinOp::from(<>);
UnOp<Kind>:  UnOp  = Spanned<Kind> => UnOp::from(<>);

Op0: BinOpKind = {
    ";" => BinOpKind::Seq,
};

Op1: BinOpKind = {
    "|>" => BinOpKind::Pipe,
    ":=" => BinOpKind::Mut,
};

Op2: BinOpKind = {
    "bor"  => BinOpKind::Bor,
    "band" => BinOpKind::Band,
    "bxor" => BinOpKind::Bxor,
    "xor"  => BinOpKind::Xor,
    "or"   => BinOpKind::Or,
    "and"  => BinOpKind::And,
};

Op3: BinOpKind = {
    "==" => BinOpKind::Equ,
    "!=" => BinOpKind::Neq,
};

Op4: BinOpKind = {
    ">"  => BinOpKind::Gt,
    "<"  => BinOpKind::Lt,
    ">=" => BinOpKind::Geq,
    "<=" => BinOpKind::Leq,
};

Op5: BinOpKind = {
    "+" => BinOpKind::Add,
    "-" => BinOpKind::Sub,
    "%" => BinOpKind::Mod,
};

Op6: BinOpKind = {
    "*" => BinOpKind::Mul,
    "/" => BinOpKind::Div,
};

Op7: UnOpKind = {
    "not" => UnOpKind::Not,
    "-" => UnOpKind::Neg,
};

Op8: BinOpKind = {
    "**" => BinOpKind::Pow,
};

//=============================================================================
// Precedence Climbing
//=============================================================================

ExprKind0:  ExprKind = BinaryInfixRightAssociative<BinOp<Op0>, ExprKind1>;
ExprKind1:  ExprKind = {
    "let" <Param> "=" <Expr2> "in" <Expr1> => ExprKind::Let(<>),
    "emit" <Expr1>                         => ExprKind::Emit(<>),
    "log" <Expr1>                          => ExprKind::Log(<>),
    "return" <Expr1?> ";;"                 => ExprKind::Return(<>),
    ExprKind2
};
ExprKind2:  ExprKind = {
    <BarVec<Param>> <Expr2> => ExprKind::Lambda(<>),
    ExprKind3
};
ExprKind3:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op1>, ExprKind4>;
ExprKind4:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op2>, ExprKind5>;
ExprKind5:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op3>, ExprKind6>;
ExprKind6:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op4>, ExprKind7>;
ExprKind7:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op5>, ExprKind8>;
ExprKind8:  ExprKind =  BinaryInfixLeftAssociative<BinOp<Op6>, ExprKind9>;
ExprKind9:  ExprKind =                 UnaryPrefix<UnOp<Op7>,  ExprKind10>;
ExprKind10: ExprKind = BinaryInfixRightAssociative<BinOp<Op8>, ExprKind11>;
ExprKind11: ExprKind = {
    <Expr11> <ParenVec<Expr2>>  => ExprKind::Call(<>),
    <Expr11> "as" <Type0>       => ExprKind::Cast(<>),
    <Expr11> "." <Name>         => ExprKind::Access(<>),
    <Expr11> "." <Index>        => ExprKind::Project(<>),
    ExprKind12,
};
ExprKind12: ExprKind = {
    Paren<ExprKind0>,
    Brace<ExprKind0>,
    LitKind                                                             => ExprKind::Lit(<>),
    Path                                                                => ExprKind::Path(<>),
    Brack<VecNonEmpty<Expr0>>                                           => ExprKind::Array(<>),
    Paren<VecMulti<Expr0>>                                              => ExprKind::Tuple(<>),
    Brace<Vec<Field<Expr0>>>                                            => ExprKind::Struct(<>),
    "if" <Expr2> <Brace<Expr0>> "else" <Brace<Expr0>>                   => ExprKind::If(<>),
    "if" "let" <Pat0> "=" <Expr2> <Brace<Expr0>> "else" <Brace<Expr0>>  => ExprKind::IfLet(<>),
    "match" <Expr0> <Brace<Vec<Case>>>                                  => ExprKind::Match(<>),
    "reduce" <Pat0> "=" <Expr0> <ReduceKind>                            => ExprKind::Reduce(<>),
    "loop" <Brace<Expr0>>                                               => ExprKind::Loop(<>),
    "break"                                                             => ExprKind::Break,
    "for" <Pat0> "in" <Expr0> <Brace<Expr0>>                            => ExprKind::For(<>),
    "unwrap" <Brack<Path>> <Paren<Expr0>>                               => ExprKind::Unwrap(<>),
    "enwrap" <Brack<Path>> <Paren<Expr0>>                               => ExprKind::Enwrap(<>),
    "is" <Brack<Path>> <Paren<Expr0>>                                   => ExprKind::Is(<>),
    "???"                                                               => ExprKind::Todo,
    Err                                                                 => ExprKind::Err,
};

ReduceKind: ReduceKind = {
    "loop" <Brace<Expr0>>                    => ReduceKind::Loop(<>),
    "for" <Pat0> "in" <Expr0> <Brace<Expr0>> => ReduceKind::For(<>),
};

//=============================================================================
// Lit
//=============================================================================

LitKind: LitKind = {
    LitBool => LitKind::Bool(<>),
    LitChar => LitKind::Char(<>),
    LitI8   => LitKind::I8(<>),
    LitI16  => LitKind::I16(<>),
    LitI32  => LitKind::I32(<>),
    LitI64  => LitKind::I64(<>),
    LitU8   => LitKind::U8(<>),
    LitU16  => LitKind::U16(<>),
    LitU32  => LitKind::U32(<>),
    LitU64  => LitKind::U64(<>),
    LitBf16 => LitKind::Bf16(<>),
    LitF16  => LitKind::F16(<>),
    LitF32  => LitKind::F32(<>),
    LitF64  => LitKind::F64(<>),
    LitStr  => LitKind::Str(<>),
    LitTime => LitKind::Time(<>),
    "()"    => LitKind::Unit,
};

//=============================================================================
// Patterns
//=============================================================================

Param: Param = Spanned<(<Pat1> <(":" <Type0>)?>)> => Param::from(<>);

Pat<Kind>: Pat = Spanned<Kind> => Pat::from(<>);
Pat0 = Pat<PatKind0>;
Pat1 = Pat<PatKind1>;

PatKind0: PatKind = {
    <Box<Pat0>> "|" <Box<Pat1>> => PatKind::Or(<>),
    PatKind1
};

PatKind1: PatKind = {
    LitKind                  => PatKind::Val(<>),
    Name                     => PatKind::Var(<>),
    Path Paren<Box<Pat0>>    => PatKind::Variant(<>),
    Paren<VecNonEmpty<Pat0>> => PatKind::Tuple(<>),
    Brace<Vec<FieldPat>>     => PatKind::Struct(<>),
    "_"                      => PatKind::Ignore,
};

FieldPat: Field<Option<Pat>> = Spanned<(Name (":" <Pat0>)?)> => Field::from(<>);

//=============================================================================
// Types
//=============================================================================

Type0 = Type<TypeKind0>;
Type1 = Type<TypeKind1>;
Type2 = Type<TypeKind2>;

Type<Kind>: Type = Spanned<Kind> => Type::from(<>);

TypeKind0: TypeKind = {
    "fun" <ParenVec<Type0>> "->" <Box<Type0>>       => TypeKind::Fun(<>),
    "~" <Box<Type0>>                                => TypeKind::Stream(<>),
    TypeKind1,
};

TypeKind1: TypeKind = {
    <Box<Type1>> "?" => TypeKind::Optional(<>),
    TypeKind2,
};

TypeKind2: TypeKind = {
    ScalarKind                              => TypeKind::Scalar(<>),
    Path                                    => TypeKind::Nominal(<>),
    Brace<<Vec<Field<Type0>>>>              => TypeKind::Struct(<>),
    Brace<(<Box<Type0>> "=>" <Box<Type0>>)> => TypeKind::Map(<>.0, <>.1),
    Brace<<Box<Type0>>>                     => TypeKind::Set(<>),
    Paren<<VecMulti<Type0>>>                => TypeKind::Tuple(<>),
    Brack<(<(<Box<Type0>> ";")?> <Shape>)>  => TypeKind::Array(<>.0, <>.1),
    Brack<<Box<Type0>>>                     => TypeKind::Vector(<>),
    Err                                     => TypeKind::Err,
};

ScalarKind: ScalarKind = {
    "bool" => ScalarKind::Bool,
    "bf16" => ScalarKind::Bf16,
    "f16"  => ScalarKind::F16,
    "f32"  => ScalarKind::F32,
    "f64"  => ScalarKind::F64,
    "i8"   => ScalarKind::I8,
    "i16"  => ScalarKind::I16,
    "i32"  => ScalarKind::I32,
    "i64"  => ScalarKind::I64,
    "u8"   => ScalarKind::U8,
    "u16"  => ScalarKind::U16,
    "u32"  => ScalarKind::U32,
    "u64"  => ScalarKind::U64,
    "null" => ScalarKind::Null,
    "str"  => ScalarKind::Str,
    "()"   => ScalarKind::Unit,
    "!"    => ScalarKind::Bot,
};

//=============================================================================
// Shape and Dimensions
//=============================================================================

Shape: Shape = Spanned<Vec<Dim<DimKind0>>> => Shape::from(<>);

Dim<DimKind>: Dim = Spanned<DimKind> => Dim::from(<>);
Dim0 = Dim<DimKind0>;
Dim1 = Dim<DimKind1>;
Dim2 = Dim<DimKind2>;

DimKind0: DimKind = {
    Box<Dim0> DimOp0 Box<Dim1> => DimKind::Op(<>),
    DimKind1,
};

DimKind1: DimKind = {
    Box<Dim1> DimOp1 Box<Dim2> => DimKind::Op(<>),
    DimKind2,
};

DimKind2: DimKind = {
    LitI32 => DimKind::Val(<>),
    "?"    => DimKind::Var(0),
};

DimOp<Kind>: DimOp = Spanned<Kind> => DimOp::from(<>);
DimOp0 = DimOp<DimOpKind0>;
DimOp1 = DimOp<DimOpKind1>;

DimOpKind0: DimOpKind = {
    "+" => DimOpKind::Add,
    "-" => DimOpKind::Sub,
};

DimOpKind1: DimOpKind = {
    "*" => DimOpKind::Mul,
    "/" => DimOpKind::Div,
};
