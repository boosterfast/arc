---
source: arc-script-test-insta/src/lib.rs
expression: s
input_file: arc-script-test-insta/src/expect-pass/enum-pattern-nested.arc
---
module @toplevel {
    func @x_5() -> i0 {
        %x_6 = arc.constant unit : i0
        return %x_6 : i0
    }
    func @main() -> i0 {
        %x_7 = arc.constant 5 : si32
        %x_8 = "arc.enwrap"%x_7 { variant = crate_Baz_Some } : si32 -> crate_Baz
        %x_9 = "arc.enwrap"%x_8 { variant = crate_Foo_Bar } : crate_Baz -> crate_Foo
        %x_A = "arc.is"%x_9 { variant = crate_Foo_Bar } : crate_Foo -> i1
        %x_I = "arc.if"(%x_A) ({
            %x_B = "arc.unwrap"%x_9 { variant = crate_Foo_Bar } : crate_Foo -> crate_Baz
            %x_C = "arc.is"%x_B { variant = crate_Baz_Some } : crate_Baz -> i1
            %x_G = "arc.if"(%x_C) ({
                %x_D = "arc.unwrap"%x_B { variant = crate_Baz_Some } : crate_Baz -> si32
                %x_E = arc.constant unit : i0
                "arc.block.result"(%x_E) : (i0) -> ()
            },{
                %x_F = call crate_x_5() : () -> i0
                "arc.block.result"(%x_F) : (i0) -> ()
            }) : (i1) -> i0
            "arc.block.result"(%x_G) : (i0) -> ()
        },{
            %x_H = call crate_x_5() : () -> i0
            "arc.block.result"(%x_H) : (i0) -> ()
        }) : (i1) -> i0
        return %x_I : i0
    }
}

